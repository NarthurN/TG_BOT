package main

import (
	"fmt"
	"log"
	"os"
	"sort"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// üëâ –ó–∞–¥–∞–Ω–∏–µ 1: –°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É TeamScore!
// –ü–æ–¥—Å–∫–∞–∑–∫–∞: –Ω–∞–º –Ω—É–∂–Ω–∞ –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
type TeamScore struct {
	scores map[string]int
}

// üëâ –ó–∞–¥–∞–Ω–∏–µ 2: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞
func NewTeamScore() *TeamScore {
	return &TeamScore{scores: make(map[string]int)}
}

// üëâ –ó–∞–¥–∞–Ω–∏–µ 3: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
func (ts *TeamScore) AddScore(name string) {
	ts.scores[name]++
}

// üëâ –ó–∞–¥–∞–Ω–∏–µ 4: –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –æ—á–∫–æ–≤
func (ts *TeamScore) GetScores() string {
	if len(ts.scores) == 0 {
		return "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /add [–∏–º—è]"
	}

	// // –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π—Å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
	// type player struct {
	// 	name  string
	// 	score int
	// }
	// var players []player

	// // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ª–∞–π—Å
	// for name, score := range ts.scores {
	// 	players = append(players, player{name, score})
	// }

	var players []struct {
		name  string
		score int
	}

	for name, score := range ts.scores {
		players = append(players, struct {
			name  string
			score int
		}{name, score})
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
	sort.Slice(players, func(i, j int) bool {
		if players[i].score == players[j].score {
			return players[i].name < players[j].name
		}
		return players[i].score > players[j].score
	})

	var result strings.Builder
	result.WriteString("üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n\n")
	// –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –º–µ—Å—Ç
	medals := []string{"ü•á", "ü•à", "ü•â"}

	for i, p := range players {
		if i < len(medals) {
			result.WriteString(fmt.Sprintf("%s %-15s: %d –æ—á–∫–æ–≤\n", medals[i], p.name, p.score))
		} else {
			result.WriteString(fmt.Sprintf("üîπ %-15s: %d –æ—á–∫–æ–≤\n", p.name, p.score))
		}
	}
	return result.String()
}

func main() {
	// üëâ –ó–∞–¥–∞–Ω–∏–µ 5: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π –±–æ—Ç–∞ —Å —Ç–≤–æ–∏–º —Ç–æ–∫–µ–Ω–æ–º
	token := os.Getenv("TGApi")
	if token == "" {
		log.Panic("TGApi –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞:", err)
	}

	// –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫
	teamScore := NewTeamScore()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	fmt.Println("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç –∫–æ–º–∞–Ω–¥!")

	// üëâ –ó–∞–¥–∞–Ω–∏–µ 6: –ù–∞–ø–∏—à–∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥
	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		msg := tgbotapi.NewMessage(chatID, "")

		switch update.Message.Command() {
		case "start":
			msg.Text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –æ—á–∫–æ–≤.\n\n" +
				"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
				"/add [–∏–º—è] - –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫—É\n" +
				"/score - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n" +
				"/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
				"/newGame - –Ω–æ–≤–∞—è –∏–≥—Ä–∞"
		case "help":
			msg.Text = "–ö–æ–º–∞–Ω–¥—ã\n" +
				"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
				"/add [–∏–º—è] - –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫—É\n" +
				"/score - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n" +
				"/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n" +
				"/newGame - –Ω–æ–≤–∞—è –∏–≥—Ä–∞"
		case "score":
			msg.Text = teamScore.GetScores()
		case "add":
			name := strings.TrimSpace(update.Message.CommandArguments())
			if name == "" {
				msg.Text = "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add [–∏–º—è]\n–ü—Ä–∏–º–µ—Ä: /add –ê–ª–µ–∫—Å–µ–π"
			} else {
				teamScore.AddScore(name)
				msg.Text = fmt.Sprintf("‚úÖ %s –ø–æ–ª—É—á–∏–ª 1 –æ—á–∫–æ!", name)
			}
		case "newGame":
			clear(teamScore.scores)
			msg.Text = "–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!"
		default:
			if update.Message.IsCommand() {
				msg.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"
			} else {
				continue
			}
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		if _, err := bot.Send(msg); err != nil {
			log.Panic(err)
		}
	}
}
